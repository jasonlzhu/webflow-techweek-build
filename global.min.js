// Key iOS fixes applied:

// 1. Date parsing fix - iOS doesn't support "." as date separator
const parseDate = (dateString) => {
  if (!dateString) return null;
  
  // Convert dots to slashes for iOS compatibility
  const isoFormat = dateString.replace(/\./g, '/');
  
  // Try multiple date formats for better compatibility
  const date = new Date(isoFormat);
  
  // Fallback: try parsing manually if automatic parsing fails
  if (isNaN(date.getTime())) {
    const parts = dateString.split('.');
    if (parts.length === 3) {
      // Assuming format is DD.MM.YYYY or MM.DD.YYYY
      const year = parseInt(parts[2]);
      const month = parseInt(parts[1]) - 1; // Month is 0-indexed
      const day = parseInt(parts[0]);
      return new Date(year, month, day);
    }
  }
  
  return date;
};

// 2. iOS form submission handler with better error handling
const handleSubmit = async (event) => {
  if (event && event.preventDefault) {
    event.preventDefault();
  }
  
  try {
    // Add explicit headers for iOS compatibility
    const response = await fetch('https://api.tech-week.com/submit_email/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        // Add cache control for iOS
        'Cache-Control': 'no-cache'
      },
      body: JSON.stringify({ email: emailInput }),
      credentials: 'include',
      // Add timeout for iOS network issues
      signal: AbortSignal.timeout(10000) // 10 second timeout
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    
    // Use setTimeout to ensure proper page reload on iOS
    setTimeout(() => {
      window.location.reload();
    }, 100);
    
  } catch (error) {
    console.error('Submit error:', error);
    setPopupState('incognito');
  }
};

// 3. iOS-compatible email validation
const validateEmail = (email) => {
  // More robust email regex that works consistently across browsers
  const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
  return emailRegex.test(String(email).toLowerCase());
};

// 4. Enhanced event loading with iOS compatibility
useEffect(() => {
  const loadEvents = () => {
    if (window.webflowCmsData?.events) {
      const events = window.webflowCmsData.events;
      
      // Process events with improved date parsing
      events.forEach(event => {
        const eventDate = parseDate(event.time);
        event.pastEvent = eventDate ? isPastEvent(eventDate) : false;
      });

      // Sort events by date
      events.sort((a, b) => {
        const dateA = parseDate(a.time);
        const dateB = parseDate(b.time);
        if (!dateA || !dateB) return 0;
        return dateA - dateB;
      });

      const upcomingEvents = events.filter(event => !event.pastEvent);
      const pastEventsList = events.filter(event => event.pastEvent);
      
      // Sort past events in reverse chronological order
      pastEventsList.sort((a, b) => {
        const dateA = parseDate(a.time);
        const dateB = parseDate(b.time);
        if (!dateA || !dateB) return 0;
        return dateB - dateA;
      });

      setUpcomingEvents(upcomingEvents);
      setPastEvents(pastEventsList);
      return true;
    }
    return false;
  };

  if (!loadEvents()) {
    // Enhanced observer for iOS
    const observer = new MutationObserver(() => {
      if (loadEvents()) {
        observer.disconnect();
      }
    });

    observer.observe(document.documentElement, {
      attributes: true,
      childList: true,
      subtree: true
    });

    // Cleanup with timeout for iOS
    const timeout = setTimeout(() => {
      observer.disconnect();
    }, 30000); // 30 second timeout

    return () => {
      observer.disconnect();
      clearTimeout(timeout);
    };
  }
}, []);

// 5. iOS-compatible resize handler
useEffect(() => {
  let resizeTimeout;
  
  const handleResize = () => {
    // Debounce resize events for iOS performance
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
      setWindowWidth(window.innerWidth);
    }, 100);
  };

  window.addEventListener('resize', handleResize, { passive: true });
  
  return () => {
    window.removeEventListener('resize', handleResize);
    clearTimeout(resizeTimeout);
  };
}, []);

// 6. Enhanced form component with iOS fixes
const FormComponent = () => {
  return (
    <form 
      className="mt-8 flex" 
      onSubmit={handleSubmit}
      // Prevent iOS form zoom
      style={{ fontSize: '16px' }}
    >
      <input
        id="email"
        type="email"
        placeholder="Register Email"
        className="bg-white text-black p-3 flex-grow outline-none border-none"
        value={emailInput}
        onChange={(e) => {
          const value = e.target.value;
          setEmailInput(value);
          setIsValidEmail(validateEmail(value));
        }}
        // iOS-specific attributes
        autoComplete="email"
        autoCapitalize="none"
        autoCorrect="off"
        spellCheck="false"
        // Prevent iOS zoom on focus
        style={{ fontSize: '16px' }}
      />
      <button
        type="submit"
        className={`p-3 border border-white ${
          isValidEmail 
            ? 'bg-black text-white hover:bg-gray-900 cursor-pointer' 
            : 'bg-gray-500 text-gray-300 cursor-not-allowed'
        }`}
        disabled={!isValidEmail}
        // iOS-specific styling
        style={{ 
          fontSize: '16px',
          WebkitAppearance: 'none',
          borderRadius: 0
        }}
      >
        Submit
      </button>
    </form>
  );
};

// 7. Enhanced CSS with iOS-specific fixes
const iosStyles = `
  /* Prevent iOS zoom on input focus */
  input[type="email"] {
    font-size: 16px !important;
    -webkit-appearance: none;
    border-radius: 0;
  }

  /* Fix iOS button styling */
  button {
    -webkit-appearance: none;
    border-radius: 0;
    font-size: 16px !important;
  }

  /* Prevent iOS scroll bounce */
  body {
    overscroll-behavior: none;
    -webkit-overflow-scrolling: touch;
  }

  /* Fix iOS backdrop blur */
  .backdrop-blur-sm {
    -webkit-backdrop-filter: blur(4px);
    backdrop-filter: blur(4px);
  }

  /* iOS-specific link styling */
  a {
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
  }
`;

// 8. Add the iOS styles to the document
useEffect(() => {
  const styleSheet = document.createElement('style');
  styleSheet.textContent = iosStyles;
  document.head.appendChild(styleSheet);
  
  return () => {
    document.head.removeChild(styleSheet);
  };
}, []);

// 9. Enhanced date formatting for iOS
const formatDate = (dateString) => {
  const date = parseDate(dateString);
  if (!date || isNaN(date.getTime())) {
    return 'Invalid Date';
  }

  try {
    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    
    const month = months[date.getMonth()];
    const day = date.getDate();
    let hours = date.getHours();
    const minutes = date.getMinutes();
    const ampm = hours >= 12 ? 'PM' : 'AM';
    
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    
    const minutesStr = minutes < 10 ? '0' + minutes : minutes;
    
    return `${month.toUpperCase()} ${day}, ${hours}:${minutesStr} ${ampm}`;
  } catch (error) {
    console.error('Date formatting error:', error);
    return 'Date Error';
  }
};